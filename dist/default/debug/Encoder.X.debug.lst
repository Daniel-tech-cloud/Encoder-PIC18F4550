

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Feb 23 16:58:17 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    12                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    13                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    14                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    15                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    16                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    17   000000                     
    18                           ; Generated 17/10/2023 GMT
    19                           ; 
    20                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    21                           ; All rights reserved.
    22                           ; 
    23                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    24                           ; 
    25                           ; Redistribution and use in source and binary forms, with or without modification, are
    26                           ; permitted provided that the following conditions are met:
    27                           ; 
    28                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    29                           ;        conditions and the following disclaimer.
    30                           ; 
    31                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    32                           ;        of conditions and the following disclaimer in the documentation and/or other
    33                           ;        materials provided with the distribution. Publication is not required when
    34                           ;        this file is used in an embedded application.
    35                           ; 
    36                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    37                           ;        software without specific prior written permission.
    38                           ; 
    39                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    40                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    41                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    42                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    43                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    44                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    45                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    46                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    47                           ; 
    48                           ; 
    49                           ; Code-generator required, PIC18F4550 Definitions
    50                           ; 
    51                           ; SFR Addresses
    52   000000                     _RB0	set	31752
    53   000000                     _PORTA	set	3968
    54   000000                     _TRISA	set	3986
    55   000000                     _TRISB	set	3987
    56   000000                     _RB1	set	31753
    57   000000                     _SSPCON2bits	set	4037
    58   000000                     _SSPCON1bits	set	4038
    59   000000                     _SSPSTATbits	set	4039
    60   000000                     _INTCON3bits	set	4080
    61   000000                     _INTCON2bits	set	4081
    62   000000                     _INTCONbits	set	4082
    63                           
    64                           ; #config settings
    65                           
    66                           	psect	cinit
    67   000870                     __pcinit:
    68                           	callstack 0
    69   000870                     start_initialization:
    70                           	callstack 0
    71   000870                     __initialization:
    72                           	callstack 0
    73                           
    74                           ; Clear objects allocated to COMRAM (8 bytes)
    75   000870  EE00  F001         	lfsr	0,__pbssCOMRAM
    76   000874  0E08               	movlw	8
    77   000876                     clear_0:
    78   000876  6AEE               	clrf	postinc0,c
    79   000878  06E8               	decf	wreg,f,c
    80   00087A  E1FD               	bnz	clear_0
    81   00087C                     end_of_initialization:
    82                           	callstack 0
    83   00087C                     __end_of__initialization:
    84                           	callstack 0
    85   00087C  9009               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    86   00087E  9209               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    87   000880  0100               	movlb	0
    88   000882  EF43  F004         	goto	_main	;jump to C main() function
    89                           
    90                           	psect	bssCOMRAM
    91   000001                     __pbssCOMRAM:
    92                           	callstack 0
    93   000001                     _angulo_volante:
    94                           	callstack 0
    95   000001                     	ds	2
    96   000003                     _giros_izquierda:
    97                           	callstack 0
    98   000003                     	ds	2
    99   000005                     _giros_derecha:
   100                           	callstack 0
   101   000005                     	ds	2
   102   000007                     _contador_total:
   103                           	callstack 0
   104   000007                     	ds	2
   105                           
   106                           	psect	cstackCOMRAM
   107   000000                     __pcstackCOMRAM:
   108                           	callstack 0
   109   000000                     
   110                           ; 1 bytes @ 0x0
   111 ;;
   112 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   113 ;;
   114 ;; *************** function _main *****************
   115 ;; Defined at:
   116 ;;		line 26 in file "main.c"
   117 ;; Parameters:    Size  Location     Type
   118 ;;		None
   119 ;; Auto vars:     Size  Location     Type
   120 ;;		None
   121 ;; Return value:  Size  Location     Type
   122 ;;                  1    wreg      void 
   123 ;; Registers used:
   124 ;;		wreg, status,2, cstack
   125 ;; Tracked objects:
   126 ;;		On entry : 0/0
   127 ;;		On exit  : 0/0
   128 ;;		Unchanged: 0/0
   129 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   130 ;;      Params:         0       0       0       0       0       0       0       0       0
   131 ;;      Locals:         0       0       0       0       0       0       0       0       0
   132 ;;      Temps:          0       0       0       0       0       0       0       0       0
   133 ;;      Totals:         0       0       0       0       0       0       0       0       0
   134 ;;Total ram usage:        0 bytes
   135 ;; Hardware stack levels required when called: 2
   136 ;; This function calls:
   137 ;;		_SPI_Init
   138 ;;		_inicializar
   139 ;; This function is called by:
   140 ;;		Startup code after reset
   141 ;; This function uses a non-reentrant model
   142 ;;
   143                           
   144                           	psect	text0
   145   000886                     __ptext0:
   146                           	callstack 0
   147   000886                     _main:
   148                           	callstack 29
   149   000886                     
   150                           ;main.c: 27:     inicializar();
   151   000886  EC4D  F004         	call	_inicializar	;wreg free
   152                           
   153                           ;main.c: 28:     SPI_Init();
   154   00088A  EC57  F004         	call	_SPI_Init	;wreg free
   155   00088E                     l759:
   156                           
   157                           ;main.c: 31:         PORTA = contador_total;
   158   00088E  C007  FF80         	movff	_contador_total,3968	;volatile
   159   000892  EF47  F004         	goto	l759
   160   000896  EF07  F000         	goto	start
   161   00089A                     __end_of_main:
   162                           	callstack 0
   163                           
   164 ;; *************** function _inicializar *****************
   165 ;; Defined at:
   166 ;;		line 36 in file "main.c"
   167 ;; Parameters:    Size  Location     Type
   168 ;;		None
   169 ;; Auto vars:     Size  Location     Type
   170 ;;		None
   171 ;; Return value:  Size  Location     Type
   172 ;;                  1    wreg      void 
   173 ;; Registers used:
   174 ;;		wreg, status,2
   175 ;; Tracked objects:
   176 ;;		On entry : 0/0
   177 ;;		On exit  : 0/0
   178 ;;		Unchanged: 0/0
   179 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   180 ;;      Params:         0       0       0       0       0       0       0       0       0
   181 ;;      Locals:         0       0       0       0       0       0       0       0       0
   182 ;;      Temps:          0       0       0       0       0       0       0       0       0
   183 ;;      Totals:         0       0       0       0       0       0       0       0       0
   184 ;;Total ram usage:        0 bytes
   185 ;; Hardware stack levels used: 1
   186 ;; Hardware stack levels required when called: 1
   187 ;; This function calls:
   188 ;;		Nothing
   189 ;; This function is called by:
   190 ;;		_main
   191 ;; This function uses a non-reentrant model
   192 ;;
   193                           
   194                           	psect	text1
   195   00089A                     __ptext1:
   196                           	callstack 0
   197   00089A                     _inicializar:
   198                           	callstack 29
   199   00089A                     
   200                           ;main.c: 38:     TRISB = 0b00000011;
   201   00089A  0E03               	movlw	3
   202   00089C  6E93               	movwf	147,c	;volatile
   203                           
   204                           ;main.c: 41:     TRISA = 0x00;
   205   00089E  0E00               	movlw	0
   206   0008A0  6E92               	movwf	146,c	;volatile
   207   0008A2                     
   208                           ;main.c: 44:     INTCONbits.GIE = 1;
   209   0008A2  8EF2               	bsf	242,7,c	;volatile
   210   0008A4                     
   211                           ;main.c: 45:     INTCONbits.INT0IE = 1;
   212   0008A4  88F2               	bsf	242,4,c	;volatile
   213   0008A6                     
   214                           ;main.c: 46:     INTCON2bits.INTEDG0 = 0;
   215   0008A6  9CF1               	bcf	241,6,c	;volatile
   216   0008A8                     
   217                           ;main.c: 47:     INTCON3bits.INT1IE = 1;
   218   0008A8  86F0               	bsf	240,3,c	;volatile
   219   0008AA                     
   220                           ;main.c: 48:     INTCON2bits.INTEDG1 = 0;
   221   0008AA  9AF1               	bcf	241,5,c	;volatile
   222   0008AC  0012               	return		;funcret
   223   0008AE                     __end_of_inicializar:
   224                           	callstack 0
   225                           
   226 ;; *************** function _SPI_Init *****************
   227 ;; Defined at:
   228 ;;		line 51 in file "main.c"
   229 ;; Parameters:    Size  Location     Type
   230 ;;		None
   231 ;; Auto vars:     Size  Location     Type
   232 ;;		None
   233 ;; Return value:  Size  Location     Type
   234 ;;                  1    wreg      void 
   235 ;; Registers used:
   236 ;;		wreg, status,2
   237 ;; Tracked objects:
   238 ;;		On entry : 0/0
   239 ;;		On exit  : 0/0
   240 ;;		Unchanged: 0/0
   241 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   242 ;;      Params:         0       0       0       0       0       0       0       0       0
   243 ;;      Locals:         0       0       0       0       0       0       0       0       0
   244 ;;      Temps:          0       0       0       0       0       0       0       0       0
   245 ;;      Totals:         0       0       0       0       0       0       0       0       0
   246 ;;Total ram usage:        0 bytes
   247 ;; Hardware stack levels used: 1
   248 ;; Hardware stack levels required when called: 1
   249 ;; This function calls:
   250 ;;		Nothing
   251 ;; This function is called by:
   252 ;;		_main
   253 ;; This function uses a non-reentrant model
   254 ;;
   255                           
   256                           	psect	text2
   257   0008AE                     __ptext2:
   258                           	callstack 0
   259   0008AE                     _SPI_Init:
   260                           	callstack 29
   261   0008AE                     
   262                           ;main.c: 56:     SSPSTATbits.SMP = 1;
   263   0008AE  8EC7               	bsf	199,7,c	;volatile
   264                           
   265                           ;main.c: 57:     SSPSTATbits.CKE = 1;
   266   0008B0  8CC7               	bsf	199,6,c	;volatile
   267                           
   268                           ;main.c: 60:     SSPCON1bits.SSPEN = 1;
   269   0008B2  8AC6               	bsf	198,5,c	;volatile
   270                           
   271                           ;main.c: 61:     SSPCON1bits.CKP = 0;
   272   0008B4  98C6               	bcf	198,4,c	;volatile
   273   0008B6                     
   274                           ;main.c: 62:     SSPCON1bits.SSPM = 0b0000;
   275   0008B6  0EF0               	movlw	-16
   276   0008B8  16C6               	andwf	198,f,c	;volatile
   277   0008BA                     
   278                           ;main.c: 65:     SSPCON2bits.SEN = 0;
   279   0008BA  90C5               	bcf	197,0,c	;volatile
   280   0008BC                     
   281                           ;main.c: 66:     SSPCON2bits.RSEN = 0;
   282   0008BC  92C5               	bcf	197,1,c	;volatile
   283   0008BE                     
   284                           ;main.c: 67:     SSPCON2bits.PEN = 0;
   285   0008BE  94C5               	bcf	197,2,c	;volatile
   286   0008C0  0012               	return		;funcret
   287   0008C2                     __end_of_SPI_Init:
   288                           	callstack 0
   289                           
   290 ;; *************** function _ISR *****************
   291 ;; Defined at:
   292 ;;		line 71 in file "main.c"
   293 ;; Parameters:    Size  Location     Type
   294 ;;		None
   295 ;; Auto vars:     Size  Location     Type
   296 ;;		None
   297 ;; Return value:  Size  Location     Type
   298 ;;                  1    wreg      void 
   299 ;; Registers used:
   300 ;;		status,2, status,0
   301 ;; Tracked objects:
   302 ;;		On entry : 0/0
   303 ;;		On exit  : 0/0
   304 ;;		Unchanged: 0/0
   305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   306 ;;      Params:         0       0       0       0       0       0       0       0       0
   307 ;;      Locals:         0       0       0       0       0       0       0       0       0
   308 ;;      Temps:          0       0       0       0       0       0       0       0       0
   309 ;;      Totals:         0       0       0       0       0       0       0       0       0
   310 ;;Total ram usage:        0 bytes
   311 ;; Hardware stack levels used: 1
   312 ;; This function calls:
   313 ;;		Nothing
   314 ;; This function is called by:
   315 ;;		Interrupt level 2
   316 ;; This function uses a non-reentrant model
   317 ;;
   318                           
   319                           	psect	intcode
   320   000008                     __pintcode:
   321                           	callstack 0
   322   000008                     _ISR:
   323                           	callstack 29
   324                           
   325                           ;incstack = 0
   326   000008  8209               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   327   00000A  ED01  F004         	call	int_func,f	;refresh shadow registers
   328                           
   329                           	psect	intcode_body
   330   000802                     __pintcode_body:
   331                           	callstack 29
   332   000802                     int_func:
   333                           	callstack 29
   334   000802  0006               	pop		; remove dummy address from shadow register refresh
   335   000804                     
   336                           ;main.c: 72:     if(INTCONbits.INT0IF) {
   337   000804  A2F2               	btfss	242,1,c	;volatile
   338   000806  EF07  F004         	goto	i2u1_41
   339   00080A  EF09  F004         	goto	i2u1_40
   340   00080E                     i2u1_41:
   341   00080E  EF1C  F004         	goto	i2l771
   342   000812                     i2u1_40:
   343   000812                     
   344                           ;main.c: 73:         if(RB1 == 1) {
   345   000812  A281               	btfss	3969,1,c	;volatile
   346   000814  EF0E  F004         	goto	i2u2_41
   347   000818  EF10  F004         	goto	i2u2_40
   348   00081C                     i2u2_41:
   349   00081C  EF16  F004         	goto	i2l767
   350   000820                     i2u2_40:
   351   000820                     
   352                           ;main.c: 74:             contador_total++;
   353   000820  4A07               	infsnz	_contador_total^0,f,c	;volatile
   354   000822  2A08               	incf	(_contador_total+1)^0,f,c	;volatile
   355                           
   356                           ;main.c: 75:             giros_derecha++;
   357   000824  4A05               	infsnz	_giros_derecha^0,f,c	;volatile
   358   000826  2A06               	incf	(_giros_derecha+1)^0,f,c	;volatile
   359                           
   360                           ;main.c: 76:         } else {
   361   000828  EF1B  F004         	goto	i2l769
   362   00082C                     i2l767:
   363                           
   364                           ;main.c: 77:             contador_total--;
   365   00082C  0607               	decf	_contador_total^0,f,c	;volatile
   366   00082E  A0D8               	btfss	status,0,c
   367   000830  0608               	decf	(_contador_total+1)^0,f,c	;volatile
   368                           
   369                           ;main.c: 78:             giros_izquierda++;
   370   000832  4A03               	infsnz	_giros_izquierda^0,f,c	;volatile
   371   000834  2A04               	incf	(_giros_izquierda+1)^0,f,c	;volatile
   372   000836                     i2l769:
   373                           
   374                           ;main.c: 80:         INTCONbits.INT0IF = 0;
   375   000836  92F2               	bcf	242,1,c	;volatile
   376   000838                     i2l771:
   377                           
   378                           ;main.c: 83:     if(INTCON3bits.INT1IF) {
   379   000838  A0F0               	btfss	240,0,c	;volatile
   380   00083A  EF21  F004         	goto	i2u3_41
   381   00083E  EF23  F004         	goto	i2u3_40
   382   000842                     i2u3_41:
   383   000842  EF36  F004         	goto	i2l59
   384   000846                     i2u3_40:
   385   000846                     
   386                           ;main.c: 84:         if(RB0 == 0) {
   387   000846  B081               	btfsc	3969,0,c	;volatile
   388   000848  EF28  F004         	goto	i2u4_41
   389   00084C  EF2A  F004         	goto	i2u4_40
   390   000850                     i2u4_41:
   391   000850  EF30  F004         	goto	i2l777
   392   000854                     i2u4_40:
   393   000854                     
   394                           ;main.c: 85:             contador_total++;
   395   000854  4A07               	infsnz	_contador_total^0,f,c	;volatile
   396   000856  2A08               	incf	(_contador_total+1)^0,f,c	;volatile
   397                           
   398                           ;main.c: 86:             giros_derecha++;
   399   000858  4A05               	infsnz	_giros_derecha^0,f,c	;volatile
   400   00085A  2A06               	incf	(_giros_derecha+1)^0,f,c	;volatile
   401                           
   402                           ;main.c: 87:         } else {
   403   00085C  EF35  F004         	goto	i2l779
   404   000860                     i2l777:
   405                           
   406                           ;main.c: 88:             contador_total--;
   407   000860  0607               	decf	_contador_total^0,f,c	;volatile
   408   000862  A0D8               	btfss	status,0,c
   409   000864  0608               	decf	(_contador_total+1)^0,f,c	;volatile
   410                           
   411                           ;main.c: 89:             giros_izquierda++;
   412   000866  4A03               	infsnz	_giros_izquierda^0,f,c	;volatile
   413   000868  2A04               	incf	(_giros_izquierda+1)^0,f,c	;volatile
   414   00086A                     i2l779:
   415                           
   416                           ;main.c: 91:         INTCON3bits.INT1IF = 0;
   417   00086A  90F0               	bcf	240,0,c	;volatile
   418   00086C                     i2l59:
   419   00086C  9209               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   420   00086E  0011               	retfie		f
   421   000870                     __end_of_ISR:
   422                           	callstack 0
   423                           
   424                           	psect	smallconst
   425   000800                     __psmallconst:
   426                           	callstack 0
   427   000800  00                 	db	0
   428   000801  00                 	db	0	; dummy byte at the end
   429   000000                     
   430                           	psect	rparam
   431   000000                     
   432                           	psect	temp
   433   000009                     btemp:
   434                           	callstack 0
   435   000009                     	ds	1
   436   000000                     int$flags	set	btemp
   437   000000                     wtemp8	set	btemp+1
   438   000000                     ttemp5	set	btemp+1
   439   000000                     ttemp6	set	btemp+4
   440   000000                     ttemp7	set	btemp+8
   441                           tosu	equ	0xFFF
   442                           tosh	equ	0xFFE
   443                           tosl	equ	0xFFD
   444                           stkptr	equ	0xFFC
   445                           pclatu	equ	0xFFB
   446                           pclath	equ	0xFFA
   447                           pcl	equ	0xFF9
   448                           tblptru	equ	0xFF8
   449                           tblptrh	equ	0xFF7
   450                           tblptrl	equ	0xFF6
   451                           tablat	equ	0xFF5
   452                           prodh	equ	0xFF4
   453                           prodl	equ	0xFF3
   454                           indf0	equ	0xFEF
   455                           postinc0	equ	0xFEE
   456                           postdec0	equ	0xFED
   457                           preinc0	equ	0xFEC
   458                           plusw0	equ	0xFEB
   459                           fsr0h	equ	0xFEA
   460                           fsr0l	equ	0xFE9
   461                           wreg	equ	0xFE8
   462                           indf1	equ	0xFE7
   463                           postinc1	equ	0xFE6
   464                           postdec1	equ	0xFE5
   465                           preinc1	equ	0xFE4
   466                           plusw1	equ	0xFE3
   467                           fsr1h	equ	0xFE2
   468                           fsr1l	equ	0xFE1
   469                           bsr	equ	0xFE0
   470                           indf2	equ	0xFDF
   471                           postinc2	equ	0xFDE
   472                           postdec2	equ	0xFDD
   473                           preinc2	equ	0xFDC
   474                           plusw2	equ	0xFDB
   475                           fsr2h	equ	0xFDA
   476                           fsr2l	equ	0xFD9
   477                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      0       8
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                           _SPI_Init
                        _inicializar
 ---------------------------------------------------------------------------------
 (1) _inicializar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _SPI_Init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _SPI_Init
   _inicializar

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      0       8       1        8.5%
BITBIGSFRhhll       31      0       0      23        0.0%
BITBIGSFRhhlh       28      0       0      22        0.0%
BITBIGSFRl          20      0       0      25        0.0%
BITBIGSFRhl         10      0       0      24        0.0%
BITBIGSFRhhh         D      0       0      21        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       8       3        0.0%
DATA                 0      0       8       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Feb 23 16:58:17 2024

            _SSPSTATbits 0FC7                       l45 08AC                       l48 08C0  
                    l741 08A6                      l751 08BA                      l743 08A8  
                    l735 089A                      l753 08BC                      l745 08AA  
                    l737 08A2                      l755 08BE                      l747 08AE  
                    l739 08A4                      l749 08B6                      l757 0886  
                    l759 088E                      _RB0 7C08                      _RB1 7C09  
                    _ISR 0008                      wreg 0FE8                     ?_ISR 0000  
                   i2l59 086C           _contador_total 0007                     _main 0886  
                   btemp 0009                     start 000E             ?_inicializar 0000  
           ___param_bank 0000                    ??_ISR 0000                    ?_main 0000  
                  i2l761 0804                    i2l763 0812                    i2l771 0838  
                  i2l773 0846                    i2l765 0820                    i2l775 0854  
                  i2l767 082C                    i2l777 0860                    i2l769 0836  
                  i2l779 086A                    _PORTA 0F80                    _TRISA 0F92  
                  _TRISB 0F93         __end_of_SPI_Init 08C2                    ttemp5 000A  
                  ttemp6 000D                    ttemp7 0011                    status 0FD8  
                  wtemp8 000A          __initialization 0870             __end_of_main 089A  
                 ??_main 0000            __activetblptr 0000            _giros_derecha 0005  
                 i2u1_40 0812                   i2u1_41 080E                   i2u2_40 0820  
                 i2u2_41 081C                   i2u3_40 0846                   i2u3_41 0842  
                 i2u4_40 0854                   i2u4_41 0850                   clear_0 0876  
                 isa$std 0001             __mediumconst 0000               __accesstop 0060  
__end_of__initialization 087C            ___rparam_used 0001           __pcstackCOMRAM 0000  
              ?_SPI_Init 0000               ??_SPI_Init 0000                  __Hparam 0000  
                __Lparam 0000             __psmallconst 0800                  __pcinit 0870  
                __ramtop 0800                  __ptext0 0886                  __ptext1 089A  
                __ptext2 08AE           __pintcode_body 0802     end_of_initialization 087C  
                int_func 0802                  postinc0 0FEE      start_initialization 0870  
            __end_of_ISR 0870            ??_inicializar 0000           _angulo_volante 0001  
            __pbssCOMRAM 0001                __pintcode 0008      __end_of_inicializar 08AE  
            __smallconst 0800          _giros_izquierda 0003                 _SPI_Init 08AE  
            _INTCON2bits 0FF1              _INTCON3bits 0FF0                 __Hrparam 0000  
            _inicializar 089A                 __Lrparam 0000                 isa$xinst 0000  
               int$flags 0009               _INTCONbits 0FF2                 intlevel2 0000  
            _SSPCON1bits 0FC6              _SSPCON2bits 0FC5  
