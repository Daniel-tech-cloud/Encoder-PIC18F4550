

Microchip MPLAB XC8 Assembler V2.46 build 20240104201356 
                                                                                               Fri Feb 23 19:52:18 2024

Microchip MPLAB XC8 C Compiler v2.46 (Free license) build 20240104201356 Og1 
     1                           	processor	18F4550
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     6                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    11                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    12                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1,noexec
    13                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    14                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    15                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1,lowdata
    16   000000                     
    17                           ; Generated 17/10/2023 GMT
    18                           ; 
    19                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    20                           ; All rights reserved.
    21                           ; 
    22                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    23                           ; 
    24                           ; Redistribution and use in source and binary forms, with or without modification, are
    25                           ; permitted provided that the following conditions are met:
    26                           ; 
    27                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    28                           ;        conditions and the following disclaimer.
    29                           ; 
    30                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    31                           ;        of conditions and the following disclaimer in the documentation and/or other
    32                           ;        materials provided with the distribution. Publication is not required when
    33                           ;        this file is used in an embedded application.
    34                           ; 
    35                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    36                           ;        software without specific prior written permission.
    37                           ; 
    38                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    39                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    40                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    41                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    42                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    43                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    44                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    45                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    46                           ; 
    47                           ; 
    48                           ; Code-generator required, PIC18F4550 Definitions
    49                           ; 
    50                           ; SFR Addresses
    51   000000                     _PORTBbits	set	3969
    52   000000                     _LATAbits	set	3977
    53   000000                     _TRISAbits	set	3986
    54   000000                     _TRISBbits	set	3987
    55   000000                     _INTCONbits	set	4082
    56   000000                     _INTCON2bits	set	4081
    57                           
    58                           ; #config settings
    59                           
    60                           	psect	cinit
    61   000932                     __pcinit:
    62                           	callstack 0
    63   000932                     start_initialization:
    64                           	callstack 0
    65   000932                     __initialization:
    66                           	callstack 0
    67                           
    68                           ; Clear objects allocated to COMRAM (8 bytes)
    69   000932  EE00  F001         	lfsr	0,__pbssCOMRAM
    70   000936  0E08               	movlw	8
    71   000938                     clear_0:
    72   000938  6AEE               	clrf	postinc0,c
    73   00093A  06E8               	decf	wreg,f,c
    74   00093C  E1FD               	bnz	clear_0
    75   00093E                     end_of_initialization:
    76                           	callstack 0
    77   00093E                     __end_of__initialization:
    78                           	callstack 0
    79   00093E  900E               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
    80   000940  920E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
    81   000942  0100               	movlb	0
    82   000944  EF6A  F004         	goto	_main	;jump to C main() function
    83                           
    84                           	psect	bssCOMRAM
    85   000001                     __pbssCOMRAM:
    86                           	callstack 0
    87   000001                     _PulsosB:
    88                           	callstack 0
    89   000001                     	ds	2
    90   000003                     _PulsosA:
    91                           	callstack 0
    92   000003                     	ds	2
    93   000005                     _EncoderB_prev:
    94                           	callstack 0
    95   000005                     	ds	2
    96   000007                     _EncoderA_prev:
    97                           	callstack 0
    98   000007                     	ds	2
    99                           
   100                           	psect	cstackCOMRAM
   101   000009                     __pcstackCOMRAM:
   102                           	callstack 0
   103   000009                     ??_ISR:
   104                           
   105                           ; 1 bytes @ 0x0
   106   000009                     	ds	1
   107   00000A                     ISR@currentEncoderA:
   108                           	callstack 0
   109                           
   110                           ; 2 bytes @ 0x1
   111   00000A                     	ds	2
   112   00000C                     ISR@currentEncoderB:
   113                           	callstack 0
   114                           
   115                           ; 2 bytes @ 0x3
   116   00000C                     	ds	2
   117   00000E                     
   118                           ; 1 bytes @ 0x5
   119 ;;
   120 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   121 ;;
   122 ;; *************** function _main *****************
   123 ;; Defined at:
   124 ;;		line 21 in file "main.c"
   125 ;; Parameters:    Size  Location     Type
   126 ;;		None
   127 ;; Auto vars:     Size  Location     Type
   128 ;;		None
   129 ;; Return value:  Size  Location     Type
   130 ;;                  1    wreg      void 
   131 ;; Registers used:
   132 ;;		wreg, status,2, status,0, cstack
   133 ;; Tracked objects:
   134 ;;		On entry : 0/0
   135 ;;		On exit  : 0/0
   136 ;;		Unchanged: 0/0
   137 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   138 ;;      Params:         0       0       0       0       0       0       0       0       0
   139 ;;      Locals:         0       0       0       0       0       0       0       0       0
   140 ;;      Temps:          0       0       0       0       0       0       0       0       0
   141 ;;      Totals:         0       0       0       0       0       0       0       0       0
   142 ;;Total ram usage:        0 bytes
   143 ;; Hardware stack levels required when called: 2
   144 ;; This function calls:
   145 ;;		_inicializar
   146 ;; This function is called by:
   147 ;;		Startup code after reset
   148 ;; This function uses a non-reentrant model
   149 ;;
   150                           
   151                           	psect	text0
   152   0008D4                     __ptext0:
   153                           	callstack 0
   154   0008D4                     _main:
   155                           	callstack 29
   156   0008D4                     
   157                           ;main.c: 22:     inicializar();
   158   0008D4  ECA4  F004         	call	_inicializar	;wreg free
   159   0008D8                     l727:
   160                           
   161                           ;main.c: 27:         if (EncoderA_prev == 0 && PORTBbits.RB0 == 1) {
   162   0008D8  5007               	movf	_EncoderA_prev^0,w,c
   163   0008DA  1008               	iorwf	(_EncoderA_prev+1)^0,w,c
   164   0008DC  A4D8               	btfss	status,2,c
   165   0008DE  EF73  F004         	goto	u11
   166   0008E2  EF75  F004         	goto	u10
   167   0008E6                     u11:
   168   0008E6  EF7F  F004         	goto	l28
   169   0008EA                     u10:
   170   0008EA  A081               	btfss	129,0,c	;volatile
   171   0008EC  EF7A  F004         	goto	u21
   172   0008F0  EF7C  F004         	goto	u20
   173   0008F4                     u21:
   174   0008F4  EF7F  F004         	goto	l28
   175   0008F8                     u20:
   176   0008F8                     
   177                           ;main.c: 29:             LATAbits.LATA0 = 1;
   178   0008F8  8089               	bsf	137,0,c	;volatile
   179                           
   180                           ;main.c: 30:         } else {
   181   0008FA  EF80  F004         	goto	l733
   182   0008FE                     l28:
   183                           
   184                           ;main.c: 32:             LATAbits.LATA0 = 0;
   185   0008FE  9089               	bcf	137,0,c	;volatile
   186   000900                     l733:
   187                           
   188                           ;main.c: 36:         if (EncoderB_prev == 0 && PORTBbits.RB1 == 1) {
   189   000900  5005               	movf	_EncoderB_prev^0,w,c
   190   000902  1006               	iorwf	(_EncoderB_prev+1)^0,w,c
   191   000904  A4D8               	btfss	status,2,c
   192   000906  EF87  F004         	goto	u31
   193   00090A  EF89  F004         	goto	u30
   194   00090E                     u31:
   195   00090E  EF93  F004         	goto	l30
   196   000912                     u30:
   197   000912  A281               	btfss	129,1,c	;volatile
   198   000914  EF8E  F004         	goto	u41
   199   000918  EF90  F004         	goto	u40
   200   00091C                     u41:
   201   00091C  EF93  F004         	goto	l30
   202   000920                     u40:
   203   000920                     
   204                           ;main.c: 38:            LATAbits.LATA1 = 1;
   205   000920  8289               	bsf	137,1,c	;volatile
   206                           
   207                           ;main.c: 39:         } else {
   208   000922  EF94  F004         	goto	l31
   209   000926                     l30:
   210                           
   211                           ;main.c: 41:            LATAbits.LATA1 = 0;
   212   000926  9289               	bcf	137,1,c	;volatile
   213   000928                     l31:
   214                           
   215                           ;main.c: 45:         INTCONbits.RBIF = 0;
   216   000928  90F2               	bcf	242,0,c	;volatile
   217   00092A  EF6C  F004         	goto	l727
   218   00092E  EF07  F000         	goto	start
   219   000932                     __end_of_main:
   220                           	callstack 0
   221                           
   222 ;; *************** function _inicializar *****************
   223 ;; Defined at:
   224 ;;		line 50 in file "main.c"
   225 ;; Parameters:    Size  Location     Type
   226 ;;		None
   227 ;; Auto vars:     Size  Location     Type
   228 ;;		None
   229 ;; Return value:  Size  Location     Type
   230 ;;                  1    wreg      void 
   231 ;; Registers used:
   232 ;;		None
   233 ;; Tracked objects:
   234 ;;		On entry : 0/0
   235 ;;		On exit  : 0/0
   236 ;;		Unchanged: 0/0
   237 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   238 ;;      Params:         0       0       0       0       0       0       0       0       0
   239 ;;      Locals:         0       0       0       0       0       0       0       0       0
   240 ;;      Temps:          0       0       0       0       0       0       0       0       0
   241 ;;      Totals:         0       0       0       0       0       0       0       0       0
   242 ;;Total ram usage:        0 bytes
   243 ;; Hardware stack levels used: 1
   244 ;; Hardware stack levels required when called: 1
   245 ;; This function calls:
   246 ;;		Nothing
   247 ;; This function is called by:
   248 ;;		_main
   249 ;; This function uses a non-reentrant model
   250 ;;
   251                           
   252                           	psect	text1
   253   000948                     __ptext1:
   254                           	callstack 0
   255   000948                     _inicializar:
   256                           	callstack 29
   257   000948                     
   258                           ;main.c: 52:     TRISBbits.TRISB0 = 1;
   259   000948  8093               	bsf	147,0,c	;volatile
   260                           
   261                           ;main.c: 53:     TRISBbits.TRISB1 = 1;
   262   00094A  8293               	bsf	147,1,c	;volatile
   263                           
   264                           ;main.c: 56:     INTCONbits.RBIE = 1;
   265   00094C  86F2               	bsf	242,3,c	;volatile
   266                           
   267                           ;main.c: 57:     INTCONbits.RBIF = 0;
   268   00094E  90F2               	bcf	242,0,c	;volatile
   269                           
   270                           ;main.c: 58:     INTCON2bits.RBPU = 0;
   271   000950  9EF1               	bcf	241,7,c	;volatile
   272                           
   273                           ;main.c: 61:     INTCONbits.GIE = 1;
   274   000952  8EF2               	bsf	242,7,c	;volatile
   275                           
   276                           ;main.c: 64:     TRISAbits.TRISA0 = 0;
   277   000954  9092               	bcf	146,0,c	;volatile
   278                           
   279                           ;main.c: 65:     TRISAbits.TRISA1 = 0;
   280   000956  9292               	bcf	146,1,c	;volatile
   281   000958  0012               	return		;funcret
   282   00095A                     __end_of_inicializar:
   283                           	callstack 0
   284                           
   285 ;; *************** function _ISR *****************
   286 ;; Defined at:
   287 ;;		line 68 in file "main.c"
   288 ;; Parameters:    Size  Location     Type
   289 ;;		None
   290 ;; Auto vars:     Size  Location     Type
   291 ;;  currentEncod    2    3[COMRAM] int 
   292 ;;  currentEncod    2    1[COMRAM] int 
   293 ;; Return value:  Size  Location     Type
   294 ;;                  1    wreg      void 
   295 ;; Registers used:
   296 ;;		wreg, status,2, status,0
   297 ;; Tracked objects:
   298 ;;		On entry : 0/0
   299 ;;		On exit  : 0/0
   300 ;;		Unchanged: 0/0
   301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7
   302 ;;      Params:         0       0       0       0       0       0       0       0       0
   303 ;;      Locals:         4       0       0       0       0       0       0       0       0
   304 ;;      Temps:          1       0       0       0       0       0       0       0       0
   305 ;;      Totals:         5       0       0       0       0       0       0       0       0
   306 ;;Total ram usage:        5 bytes
   307 ;; Hardware stack levels used: 1
   308 ;; This function calls:
   309 ;;		Nothing
   310 ;; This function is called by:
   311 ;;		Interrupt level 2
   312 ;; This function uses a non-reentrant model
   313 ;;
   314                           
   315                           	psect	intcode
   316   000008                     __pintcode:
   317                           	callstack 0
   318   000008                     _ISR:
   319                           	callstack 29
   320                           
   321                           ;incstack = 0
   322   000008  820E               	bsf	int$flags,1,c	;set compiler interrupt flag (level 2)
   323   00000A  ED01  F004         	call	int_func,f	;refresh shadow registers
   324                           
   325                           	psect	intcode_body
   326   000802                     __pintcode_body:
   327                           	callstack 29
   328   000802                     int_func:
   329                           	callstack 29
   330   000802  0006               	pop		; remove dummy address from shadow register refresh
   331   000804                     
   332                           ;main.c: 69:     if (INTCONbits.RBIF) {
   333   000804  A0F2               	btfss	242,0,c	;volatile
   334   000806  EF07  F004         	goto	i2u5_41
   335   00080A  EF09  F004         	goto	i2u5_40
   336   00080E                     i2u5_41:
   337   00080E  EF68  F004         	goto	i2l47
   338   000812                     i2u5_40:
   339   000812                     
   340                           ;main.c: 71:         int currentEncoderA = PORTBbits.RB0;
   341   000812  B081               	btfsc	129,0,c	;volatile
   342   000814  EF0E  F004         	goto	i2u6_41
   343   000818  EF12  F004         	goto	i2u6_40
   344   00081C                     i2u6_41:
   345   00081C  6A09               	clrf	??_ISR^0,c
   346   00081E  2A09               	incf	??_ISR^0,f,c
   347   000820  EF13  F004         	goto	i2u6_48
   348   000824                     i2u6_40:
   349   000824  6A09               	clrf	??_ISR^0,c
   350   000826                     i2u6_48:
   351   000826  5009               	movf	??_ISR^0,w,c
   352   000828  6E0A               	movwf	ISR@currentEncoderA^0,c
   353   00082A  6A0B               	clrf	(ISR@currentEncoderA+1)^0,c
   354                           
   355                           ;main.c: 72:         int currentEncoderB = PORTBbits.RB1;
   356   00082C  B281               	btfsc	129,1,c	;volatile
   357   00082E  EF1B  F004         	goto	i2u7_41
   358   000832  EF1F  F004         	goto	i2u7_40
   359   000836                     i2u7_41:
   360   000836  6A09               	clrf	??_ISR^0,c
   361   000838  2A09               	incf	??_ISR^0,f,c
   362   00083A  EF20  F004         	goto	i2u7_48
   363   00083E                     i2u7_40:
   364   00083E  6A09               	clrf	??_ISR^0,c
   365   000840                     i2u7_48:
   366   000840  5009               	movf	??_ISR^0,w,c
   367   000842  6E0C               	movwf	ISR@currentEncoderB^0,c
   368   000844  6A0D               	clrf	(ISR@currentEncoderB+1)^0,c
   369   000846                     
   370                           ;main.c: 75:         if (EncoderA_prev == 0 && EncoderB_prev == 0) {
   371   000846  5007               	movf	_EncoderA_prev^0,w,c
   372   000848  1008               	iorwf	(_EncoderA_prev+1)^0,w,c
   373   00084A  A4D8               	btfss	status,2,c
   374   00084C  EF2A  F004         	goto	i2u8_41
   375   000850  EF2C  F004         	goto	i2u8_40
   376   000854                     i2u8_41:
   377   000854  EF5F  F004         	goto	i2l759
   378   000858                     i2u8_40:
   379   000858  5005               	movf	_EncoderB_prev^0,w,c
   380   00085A  1006               	iorwf	(_EncoderB_prev+1)^0,w,c
   381   00085C  A4D8               	btfss	status,2,c
   382   00085E  EF33  F004         	goto	i2u9_41
   383   000862  EF35  F004         	goto	i2u9_40
   384   000866                     i2u9_41:
   385   000866  EF5F  F004         	goto	i2l759
   386   00086A                     i2u9_40:
   387   00086A                     
   388                           ;main.c: 76:             if (currentEncoderA == 1 && currentEncoderB == 0) {
   389   00086A  040A               	decf	ISR@currentEncoderA^0,w,c
   390   00086C  100B               	iorwf	(ISR@currentEncoderA+1)^0,w,c
   391   00086E  A4D8               	btfss	status,2,c
   392   000870  EF3C  F004         	goto	i2u10_41
   393   000874  EF3E  F004         	goto	i2u10_40
   394   000878                     i2u10_41:
   395   000878  EF4B  F004         	goto	i2l753
   396   00087C                     i2u10_40:
   397   00087C  500C               	movf	ISR@currentEncoderB^0,w,c
   398   00087E  100D               	iorwf	(ISR@currentEncoderB+1)^0,w,c
   399   000880  A4D8               	btfss	status,2,c
   400   000882  EF45  F004         	goto	i2u11_41
   401   000886  EF47  F004         	goto	i2u11_40
   402   00088A                     i2u11_41:
   403   00088A  EF4B  F004         	goto	i2l753
   404   00088E                     i2u11_40:
   405   00088E                     
   406                           ;main.c: 78:                 PulsosA++;
   407   00088E  4A03               	infsnz	_PulsosA^0,f,c
   408   000890  2A04               	incf	(_PulsosA+1)^0,f,c
   409                           
   410                           ;main.c: 79:             } else if (currentEncoderA == 0 && currentEncoderB == 1) {
   411   000892  EF5F  F004         	goto	i2l759
   412   000896                     i2l753:
   413   000896  500A               	movf	ISR@currentEncoderA^0,w,c
   414   000898  100B               	iorwf	(ISR@currentEncoderA+1)^0,w,c
   415   00089A  A4D8               	btfss	status,2,c
   416   00089C  EF52  F004         	goto	i2u12_41
   417   0008A0  EF54  F004         	goto	i2u12_40
   418   0008A4                     i2u12_41:
   419   0008A4  EF5F  F004         	goto	i2l759
   420   0008A8                     i2u12_40:
   421   0008A8  040C               	decf	ISR@currentEncoderB^0,w,c
   422   0008AA  100D               	iorwf	(ISR@currentEncoderB+1)^0,w,c
   423   0008AC  A4D8               	btfss	status,2,c
   424   0008AE  EF5B  F004         	goto	i2u13_41
   425   0008B2  EF5D  F004         	goto	i2u13_40
   426   0008B6                     i2u13_41:
   427   0008B6  EF5F  F004         	goto	i2l759
   428   0008BA                     i2u13_40:
   429   0008BA                     
   430                           ;main.c: 81:                 PulsosB++;
   431   0008BA  4A01               	infsnz	_PulsosB^0,f,c
   432   0008BC  2A02               	incf	(_PulsosB+1)^0,f,c
   433   0008BE                     i2l759:
   434                           
   435                           ;main.c: 86:         EncoderA_prev = currentEncoderA;
   436   0008BE  C00A  F007         	movff	ISR@currentEncoderA,_EncoderA_prev
   437   0008C2  C00B  F008         	movff	ISR@currentEncoderA+1,_EncoderA_prev+1
   438   0008C6                     
   439                           ;main.c: 87:         EncoderB_prev = currentEncoderB;
   440   0008C6  C00C  F005         	movff	ISR@currentEncoderB,_EncoderB_prev
   441   0008CA  C00D  F006         	movff	ISR@currentEncoderB+1,_EncoderB_prev+1
   442   0008CE                     
   443                           ;main.c: 90:         INTCONbits.RBIF = 0;
   444   0008CE  90F2               	bcf	242,0,c	;volatile
   445   0008D0                     i2l47:
   446   0008D0  920E               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   447   0008D2  0011               	retfie		f
   448   0008D4                     __end_of_ISR:
   449                           	callstack 0
   450                           
   451                           	psect	smallconst
   452   000800                     __psmallconst:
   453                           	callstack 0
   454   000800  00                 	db	0
   455   000801  00                 	db	0	; dummy byte at the end
   456   000000                     
   457                           	psect	rparam
   458   000000                     
   459                           	psect	temp
   460   00000E                     btemp:
   461                           	callstack 0
   462   00000E                     	ds	1
   463   000000                     int$flags	set	btemp
   464   000000                     wtemp8	set	btemp+1
   465   000000                     ttemp5	set	btemp+1
   466   000000                     ttemp6	set	btemp+4
   467   000000                     ttemp7	set	btemp+8
   468                           tosu	equ	0xFFF
   469                           tosh	equ	0xFFE
   470                           tosl	equ	0xFFD
   471                           stkptr	equ	0xFFC
   472                           pclatu	equ	0xFFB
   473                           pclath	equ	0xFFA
   474                           pcl	equ	0xFF9
   475                           tblptru	equ	0xFF8
   476                           tblptrh	equ	0xFF7
   477                           tblptrl	equ	0xFF6
   478                           tablat	equ	0xFF5
   479                           prodh	equ	0xFF4
   480                           prodl	equ	0xFF3
   481                           indf0	equ	0xFEF
   482                           postinc0	equ	0xFEE
   483                           postdec0	equ	0xFED
   484                           preinc0	equ	0xFEC
   485                           plusw0	equ	0xFEB
   486                           fsr0h	equ	0xFEA
   487                           fsr0l	equ	0xFE9
   488                           wreg	equ	0xFE8
   489                           indf1	equ	0xFE7
   490                           postinc1	equ	0xFE6
   491                           postdec1	equ	0xFE5
   492                           preinc1	equ	0xFE4
   493                           plusw1	equ	0xFE3
   494                           fsr1h	equ	0xFE2
   495                           fsr1l	equ	0xFE1
   496                           bsr	equ	0xFE0
   497                           indf2	equ	0xFDF
   498                           postinc2	equ	0xFDE
   499                           postdec2	equ	0xFDD
   500                           preinc2	equ	0xFDC
   501                           plusw2	equ	0xFDB
   502                           fsr2h	equ	0xFDA
   503                           fsr2l	equ	0xFD9
   504                           status	equ	0xFD8

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         8
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM           94      5      13
    BANK0           160      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMRAM

    None.

Critical Paths under _ISR in COMRAM

    None.

Critical Paths under _main in BANK0

    None.

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _ISR in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _ISR in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _ISR in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _ISR in BANK7

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0       0
                        _inicializar
 ---------------------------------------------------------------------------------
 (1) _inicializar                                          0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (2) _ISR                                                  5     5      0      90
                                              0 COMRAM     5     5      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _inicializar

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             7FF      0       0      26        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK7           100      0       0      19        0.0%
BANK7              100      0       0      20        0.0%
BITBANK6           100      0       0      17        0.0%
BANK6              100      0       0      18        0.0%
BITBANK5           100      0       0      15        0.0%
BANK5              100      0       0      16        0.0%
BITBANK4           100      0       0      13        0.0%
BANK4              100      0       0      14        0.0%
BITBANK3           100      0       0      11        0.0%
BANK3              100      0       0      12        0.0%
BITBANK2           100      0       0       9        0.0%
BANK2              100      0       0      10        0.0%
BITBANK1           100      0       0       7        0.0%
BANK1              100      0       0       8        0.0%
BITBANK0            A0      0       0       5        0.0%
BANK0               A0      0       0       6        0.0%
BITCOMRAM           5E      0       0       0        0.0%
COMRAM              5E      5       D       1       13.8%
BITBIGSFRhhlh       5D      0       0      22        0.0%
BITBIGSFRl          21      0       0      25        0.0%
BITBIGSFRhhh         D      0       0      21        0.0%
BITBIGSFRhhll        8      0       0      23        0.0%
BITBIGSFRhl          7      0       0      24        0.0%
BIGSFR               0      0       0     200        0.0%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0       D       3        0.0%
DATA                 0      0       D       4        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.46 build 20240104201356 
Symbol Table                                                                                   Fri Feb 23 19:52:18 2024

                     l30 0926                       l31 0928                       l28 08FE  
                     l37 0958                       u10 08EA                       u11 08E6  
                     u20 08F8                       u21 08F4                       u30 0912  
                     u31 090E                       u40 0920                       u41 091C  
                    l723 0948                      l731 08F8                      l733 0900  
                    l725 08D4                      l735 0912                      l727 08D8  
                    l737 0920                      l729 08EA                      _ISR 0008  
                    wreg 0FE8                     ?_ISR 0009                     i2l47 08D0  
                   _main 08D4                     btemp 000E                     start 000E  
           ?_inicializar 0009             ___param_bank 0000                    ??_ISR 0009  
                  ?_main 0009                    i2l741 0812                    i2l751 088E  
                  i2l743 0846                    i2l761 08C6                    i2l753 0896  
                  i2l745 0858                    i2l763 08CE                    i2l755 08A8  
                  i2l747 086A                    i2l739 0804                    i2l757 08BA  
                  i2l749 087C                    i2l759 08BE                    ttemp5 000F  
                  ttemp6 0012                    ttemp7 0016                    status 0FD8  
                  wtemp8 000F          __initialization 0932             __end_of_main 0932  
                 ??_main 000E            __activetblptr 0000                   i2u5_40 0812  
                 i2u5_41 080E                   i2u6_40 0824                   i2u6_41 081C  
                 i2u7_40 083E                   i2u6_48 0826                   i2u7_41 0836  
                 i2u8_40 0858                   i2u7_48 0840                   i2u8_41 0854  
                 i2u9_40 086A                   i2u9_41 0866                   clear_0 0938  
                 isa$std 0001             __mediumconst 0000               __accesstop 0060  
__end_of__initialization 093E            ___rparam_used 0001           __pcstackCOMRAM 0009  
                i2u10_40 087C                  i2u10_41 0878                  i2u11_40 088E  
                i2u11_41 088A                  i2u12_40 08A8                  i2u12_41 08A4  
                i2u13_40 08BA                  i2u13_41 08B6                  __Hparam 0000  
                __Lparam 0000                  _PulsosA 0003                  _PulsosB 0001  
           __psmallconst 0800                  __pcinit 0932                  __ramtop 0800  
                __ptext0 08D4                  __ptext1 0948       ISR@currentEncoderA 000A  
     ISR@currentEncoderB 000C           __pintcode_body 0802     end_of_initialization 093E  
                int_func 0802                  postinc0 0FEE                _PORTBbits 0F81  
              _TRISAbits 0F92                _TRISBbits 0F93      start_initialization 0932  
            __end_of_ISR 08D4            ??_inicializar 000E              __pbssCOMRAM 0001  
              __pintcode 0008      __end_of_inicializar 095A              __smallconst 0800  
               _LATAbits 0F89            _EncoderA_prev 0007            _EncoderB_prev 0005  
            _INTCON2bits 0FF1                 __Hrparam 0000              _inicializar 0948  
               __Lrparam 0000                 isa$xinst 0000                 int$flags 000E  
             _INTCONbits 0FF2                 intlevel2 0000  
